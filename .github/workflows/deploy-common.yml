name: "deploy-common"

on:
  workflow_call:
    inputs:
      branch:
        type: string
      branch_upper:
        type: string
      doppler_config:
        type: string
      tag_prefix:
        type: string
      dockerfile:
        type: string
      instance_env:
        type: string

    secrets:
      AWS_REGION:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      TK_GITHUB_ACCESS_TOKEN:
        required: true
      TK_GITHUB_ACCESS_TOKEN_OWNER:
        required: true
      DOPPLER_SERVICE_TOKEN:
        required: true
      BASTION_SSH_KEY:
        required: true

jobs:
  get-instance-id:
    name: Get EC2 Instance ID
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.get_instance_id.outputs.instance_id }}
    steps:
      - name: AWS Credentials 설정 (GitHub secrets 사용)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 인스턴스 ID 가져오기
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=team04-kkokkio" \
                      "Name=tag:env,Values=${{ inputs.instance_env }}" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

  pre-flyway-validate:
    name: Flyway Validate & Info (${{ inputs.branch }})
    needs: get-instance-id
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: SSH Agent 설정
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.BASTION_SSH_KEY }}

      - name: Setup Doppler (${{ inputs.branch }})
        uses: dopplerhq/secrets-fetch-action@v1.3.0
        id: fetch_doppler
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
          doppler-project: kkokkio-backend
          doppler-config: ${{ inputs.doppler_config }}

      - name: SSH 터널링 시작
        run: |
          HOST=${{ needs.get-instance-id.outputs.instance_id }}
          PORT=${{ steps.fetch_doppler.outputs.DB_PORT }}
          ssh -o StrictHostKeyChecking=no \
              -N -L ${{ steps.fetch_doppler.outputs.DB_PORT }}:localhost:${{ steps.fetch_doppler.outputs.DB_PORT }} ${{ steps.fetch_doppler.outputs.BASTION_USER }}@${{ steps.fetch_doppler.outputs.BASTION_HOST }} &
          echo $! > tunnel.pid
          sleep 5

      - name: Flyway Validate & Info
        env:
          DB_HOST: ${{ steps.fetch_doppler.outputs.DB_HOST }}
          DB_TUNNER_HOST: ${{ steps.fetch_doppler.outputs.RDS_TUNNEL_HOST }}
          DB_PORT: ${{ steps.fetch_doppler.outputs.DB_PORT }}
          DB_NAME: ${{ steps.fetch_doppler.outputs.DB_NAME }}
          DB_USERNAME: ${{ steps.fetch_doppler.outputs.DB_USERNAME }}
          DB_PASSWORD: ${{ steps.fetch_doppler.outputs.DB_PASSWORD }}
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}/backend/src/main/resources/db/migration:/flyway/sql:ro" \
            redgate/flyway:11 \
            -url="jdbc:mysql://${DB_TUNNER_HOST}:${DB_PORT}/${DB_NAME}?serverTimezone=UTC&characterEncoding=UTF-8" \
            -user="${DB_USERNAME}" \
            -password="${DB_PASSWORD}" \
            validate -ignoreMigrationPatterns='*:pending'

      - name: SSH 터널 종료
        if: always()
        run: |
          kill $(cat tunnel.pid) || true
          
  makeTagAndRelease:
    name: Create Tag & Release (${{ inputs.branch }})
    needs: pre-flyway-validate
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ${{ inputs.tag_prefix }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: "${{ inputs.branch_upper }} Release ${{ steps.create_tag.outputs.new_tag }}"
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시 (${{ inputs.branch }})
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2

      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: export image name
        id: export_image
        run: |
          echo "image_name=team04-kkokkio-${{ inputs.branch }}" >> $GITHUB_OUTPUT

      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: backend
          file: backend/${{ inputs.dockerfile }}
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/${{ steps.export_image.outputs.image_name }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/${{ steps.export_image.outputs.image_name }}:cache,mode=max
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/${{ steps.export_image.outputs.image_name }}:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/${{ steps.export_image.outputs.image_name }}:latest

  deploy:
    name: EC2에 배포 (${{ inputs.branch }})
    runs-on: ubuntu-latest
    needs: [buildImageAndPush, get-instance-id]
    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ needs.get-instance-id.outputs.instance_id }}
          working-directory: /
          comment: Deploy
          command: |
            set -e
            export HOME=/root
            echo "${{ secrets.TK_GITHUB_ACCESS_TOKEN }}" \
              | docker login ghcr.io \
                  -u ${{ secrets.TK_GITHUB_ACCESS_TOKEN_OWNER }} \
                  --password-stdin

            docker pull ghcr.io/${{ needs.buildImageAndPush.outputs.owner_lc }}/${{ needs.buildImageAndPush.outputs.image_name }}:latest && \
            docker stop app1 2>/dev/null || true && \
            docker rm app1 2>/dev/null || true && \
            docker run --restart always \
              -e TZ=UTC \
              -e DOPPLER_TOKEN=${{ secrets.DOPPLER_SERVICE_TOKEN }} \
              -d --name app1 -p 8080:8080 --network common \
              ghcr.io/${{ needs.buildImageAndPush.outputs.owner_lc }}/${{ needs.buildImageAndPush.outputs.image_name }}:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true


  post-flyway-validate:
    name: Flyway Validate & Info (${{ inputs.branch }})
    needs: [deploy, get-instance-id]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: SSH Agent 설정
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.BASTION_SSH_KEY }}

      - name: Setup Doppler (${{ inputs.branch }})
        uses: dopplerhq/secrets-fetch-action@v1.3.0
        id: fetch_doppler
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
          doppler-project: kkokkio-backend
          doppler-config: ${{ inputs.doppler_config }}

      - name: SSH 터널링 시작
        run: |
          HOST=${{ needs.get-instance-id.outputs.instance_id }}
          PORT=${{ steps.fetch_doppler.outputs.DB_PORT }}
          ssh -o StrictHostKeyChecking=no \
              -N -L ${{ steps.fetch_doppler.outputs.DB_PORT }}:localhost:${{ steps.fetch_doppler.outputs.DB_PORT }} ${{ steps.fetch_doppler.outputs.BASTION_USER }}@${{ steps.fetch_doppler.outputs.BASTION_HOST }} &
          echo $! > tunnel.pid
          sleep 5

      - name: Flyway Validate & Info
        env:
          DB_HOST: ${{ steps.fetch_doppler.outputs.DB_HOST }}
          DB_TUNNER_HOST: ${{ steps.fetch_doppler.outputs.RDS_TUNNEL_HOST }}
          DB_PORT: ${{ steps.fetch_doppler.outputs.DB_PORT }}
          DB_NAME: ${{ steps.fetch_doppler.outputs.DB_NAME }}
          DB_USERNAME: ${{ steps.fetch_doppler.outputs.DB_USERNAME }}
          DB_PASSWORD: ${{ steps.fetch_doppler.outputs.DB_PASSWORD }}
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}/backend/src/main/resources/db/migration:/flyway/sql:ro" \
            redgate/flyway:11 \
            -url="jdbc:mysql://${DB_TUNNER_HOST}:${DB_PORT}/${DB_NAME}?serverTimezone=UTC&characterEncoding=UTF-8" \
            -user="${DB_USERNAME}" \
            -password="${DB_PASSWORD}" \
            validate -ignoreMigrationPatterns='*:pending' && \
          docker run --rm --network host \
            -v "${{ github.workspace }}/backend/src/main/resources/db/migration:/flyway/sql:ro" \
            redgate/flyway:11 \
            -url="jdbc:mysql://${DB_TUNNER_HOST}:${DB_PORT}/${DB_NAME}?serverTimezone=UTC&characterEncoding=UTF-8" \
            -user="${DB_USERNAME}" \
            -password="${DB_PASSWORD}" \
            info

      - name: SSH 터널 종료
        if: always()
        run: |
          kill $(cat tunnel.pid) || true